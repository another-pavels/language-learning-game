name: "Terraform"

on:
  push:
    branches:
      - "maleksan"
    paths:
      - "terraform/main.tf"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-22.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Find AWS EC2 instance
        run: |
          if aws ec2 describe-instances \
              --filters \
              'Name=instance-state-name,Values=running' \
              'Name=tag:Name,Values=group-c-language-learning-game-server' \
              --query \
              'Reservations[*].Instances[*].[PublicDnsName]' \
              --output text | grep "amazon"; then
              echo "AWS EC2 instance with name \"group-c-language-learning-game-server\" already exists, abort operation..."
              exit 1  
          fi

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd ./terraform &&
          terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: |
          cd ./terraform &&
          terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd ./terraform &&
          terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        run: |
          cd ./terraform &&
          terraform apply -auto-approve -input=false
